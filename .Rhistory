legend = dimnames(subsTable)$Categorie,
fill=rainbow(5)
)
subsTable$Categorie <- rownames(subsDF)
View(subsDF)
subsDF <- as.data.frame.matrix(subsTable)
subsDF <- round(subsDF, 0)
subsTable$Categorie <- rownames(subsDF)
View(subsDF)
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
subsDF <- as.data.frame.matrix(subsTable)
subsDF <- round(subsDF, 0)
subsDF$Categorie <- rownames(subsDF)
Table <- gvisTable(subsDF)
plot(Table)
## Waarde subsidies per jaar per categorie
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
subsDF <- as.data.frame.matrix(subsTable)
subsDF <- round(subsDF, 0)
subsDF$Categorie <- rownames(subsDF)
Table <- gvisTable(subsDF)
plot(Table)
## Staafdiagram
barplot(subsTable,
main="Subsidiebedragen per categorie",
xlab="Jaar",
ylab="Bedrag",
col=rainbow(5)
)
legend("topright",
legend = dimnames(subsTable)$Categorie,
fill=rainbow(5)
)
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
kable(subsTable)
library(knitr)
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
kable(subsTable)
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
subsDF <- as.data.frame.matrix(subsTable)
subsDF <- round(subsDF, 0)
subsDF$Categorie <- rownames(subsDF)
kable(subsDF)
library(knitr)
library(dplyr)
subsDF <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%202/subs_data.csv", stringsAsFactors = TRUE)
glimpse(subsDF, 3)
## Tabel waarde subsidies per jaar per categorie
subsTable <- xtabs(Bedrag ~ Categorie + Jaar, subsDF)
subsDF <- as.data.frame.matrix(subsTable)
subsDF <- round(subsDF, 0)
kable(subsDF, caption = "Tabel 1. Waarde subsidies per jaar per categorie")
## Staafdiagram
barplot(subsTable,
main="Subsidiebedragen per categorie",
xlab="Jaar",
ylab="Bedrag",
col=rainbow(5)
)
legend("topright",
legend = dimnames(subsTable)$Categorie,
fill=rainbow(5)
)
## Aantal inspecties per woonplaats per jaar
inspecTab <- table(openDF$woonplaats, openDF$inspectiejaar)
inspecTab
str(inspecTab)
## Lees data uit online csv-bestand
openDF <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%202/open_data.csv", stringsAsFactors = TRUE)
glimpse(openDF)
## Splits de inspectiedatum
openDF <- separate(openDF, inspectiedatum, into = c("inspectiedag", "inspectiemaand", "inspectiejaar"), sep="-", remove = FALSE, extra = "drop", fill = "right")
library(dplyr)
## Splits de inspectiedatum
openDF <- separate(openDF, inspectiedatum, into = c("inspectiedag", "inspectiemaand", "inspectiejaar"), sep="-", remove = FALSE, extra = "drop", fill = "right")
library(dplyr)
library(tidyr)
## Splits de inspectiedatum
openDF <- separate(openDF, inspectiedatum, into = c("inspectiedag", "inspectiemaand", "inspectiejaar"), sep="-", remove = FALSE, extra = "drop", fill = "right")
## Aantal inspecties per woonplaats per jaar
inspecTab <- table(openDF$woonplaats, openDF$inspectiejaar)
inspecTab
str(inspecTab)
## Barplot van aantal inspecties per woonplaats per jaar
barplot(inspecTab,
xlab = "Jaar",
col=rainbow(9)
)
legend("topleft",
legend = plaatsenVec,
fill=rainbow(9)
)
## Conversie tabel naar data frame
inspecDF <- as.data.frame.matrix(inspecTab)
head(inspecDF)
## Bewaar rijnamen
plaatsenVec <- rownames(inspecDF)
cat(plaatsenVec, sep = ", ")
## Conversie tabel naar data frame
inspecDF <- as.data.frame.matrix(inspecTab)
head(inspecDF)
## Bewaar rijnamen
plaatsenVec <- rownames(inspecDF)
cat(plaatsenVec, sep = ", ")
## Barplot van aantal inspecties per woonplaats per jaar
barplot(inspecTab,
xlab = "Jaar",
col=rainbow(9)
)
legend("topleft",
legend = plaatsenVec,
fill=rainbow(9)
)
library(leaflet)
library(gsheet)
library(googleVis)
# Download a sheet
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
View(gpsData)
View(gpsData)
# Download a sheet
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
View(gpsData)
# Download a sheet
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
pal <- colorNumeric(palette = colorspace::diverge_hsv(3), domain = c(min(gpsData$speed), max(gpsData$speed)))
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
# add som circles:
addCircles(color = pal(gpsData$speed), lng=gpsData$lon, lat=gpsData$lat, 20)
m2
setwd("~/Google Drive/R-workshop/R-workshop_m/datasets")
url <- 'https://docs.google.com/spreadsheets/d/1bspvOXiUfYOhw-AZOknyAeyK2aTN5-01BhSevoyyQg0'
gpsData <- gsheet2tbl(url)
gpsData$lat <- gsub(pattern = ".", replacement = "", gpsData$lat, fixed = TRUE)
gpsData$lat <- as.numeric(gpsData$lat)/1000000
gpsData$lon <- gsub(pattern = ".", replacement = "", gpsData$lon, fixed = TRUE)
gpsData$lon <- as.numeric(gpsData$lon)/1000000
gpsData$speed <- gsub(pattern = ".", replacement = "", gpsData$speed, fixed = TRUE)
gpsData$speed <- as.numeric(gpsData$speed)/1000000
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
write.csv(dfRisk, "sessie 3/gps_data.csv")
View(gpsData)
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
gpsData$lat <- gsub(pattern = ".", replacement = "", gpsData$lat, fixed = TRUE)
gpsData$lat <- as.numeric(gpsData$lat)/1000000
gpsData$lon <- gsub(pattern = ".", replacement = "", gpsData$lon, fixed = TRUE)
gpsData$lon <- as.numeric(gpsData$lon)/1000000
gpsData$speed <- gsub(pattern = ".", replacement = "", gpsData$speed, fixed = TRUE)
gpsData$speed <- as.numeric(gpsData$speed)/1000000
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
write.csv(dfRisk, "sessie 3/gps_data.csv")
gpsData <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%203/gps_data.csv",
stringsAsFactors = TRUE)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
View(gpsData)
View(gpsData)
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
View(gpsData)
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
gpsData$lat <- gsub(pattern = ".", replacement = "", gpsData$lat, fixed = TRUE)
gpsData$lat <- as.numeric(gpsData$lat)/1000000
gpsData$lon <- gsub(pattern = ".", replacement = "", gpsData$lon, fixed = TRUE)
gpsData$lon <- as.numeric(gpsData$lon)/1000000
gpsData$speed <- gsub(pattern = ".", replacement = "", gpsData$speed, fixed = TRUE)
gpsData$speed <- as.numeric(gpsData$speed)/1000000
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
write.csv(gpsData, "sessie 3/gps_data.csv")
gpsData <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%203/gps_data.csv",
stringsAsFactors = TRUE)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
View(gpsData)
gpsData <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%203/gps_data.csv",
stringsAsFactors = TRUE)
View(gpsData)
url <- 'https://docs.google.com/spreadsheets/d/13t04EWh7DbIKy7DPRdaD5OD30PwP9AUJbER48LLdFl4'
gpsData <- gsheet2tbl(url)
View(gpsData)
url <- 'https://docs.google.com/spreadsheets/d/1bspvOXiUfYOhw-AZOknyAeyK2aTN5-01BhSevoyyQg0'
gpsData <- gsheet2tbl(url)
View(gpsData)
gpsData$lat <- gsub(pattern = ".", replacement = "", gpsData$lat, fixed = TRUE)
gpsData$lat <- as.numeric(gpsData$lat)/1000000
gpsData$lon <- gsub(pattern = ".", replacement = "", gpsData$lon, fixed = TRUE)
gpsData$lon <- as.numeric(gpsData$lon)/1000000
gpsData$speed <- gsub(pattern = ".", replacement = "", gpsData$speed, fixed = TRUE)
gpsData$speed <- as.numeric(gpsData$speed)/1000000
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
write.csv(gpsData, "sessie 3/gps_data.csv")
View(gpsData)
gpsData <- read.csv(file = "https://raw.githubusercontent.com/witusj/R-workshop/gh-pages/Datasets/sessie%203/gps_data.csv",
stringsAsFactors = TRUE)
View(gpsData)
View(gpsData)
latCtr <- mean(gpsData$lat)
lonCtr <- mean(gpsData$lon)
gpsData$coords <- paste0(gpsData$lat, ":", gpsData$lon)
g <- gvisMap(gpsData, locationvar = "coords", tipvar = "time", options = list())
plot(g)
pal <- colorNumeric(palette = colorspace::diverge_hsv(3), domain = c(min(gpsData$speed), max(gpsData$speed)))
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
# add som circles:
addCircles(color = pal(gpsData$speed), lng=gpsData$lon, lat=gpsData$lat, 20)
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
# add som circles:
addCircles(color = "Red", lng=gpsData$lon, lat=gpsData$lat, 20)
m2
View(gpsData)
setwd("~/Google Drive/R-workshop/R-workshop_m/Datasets")
stalData <- xmlToDataFrame(doc="https://www.veiligstallen.nl/veiligstallen.xml")
packs <- c("gsheet", "dplyr", "readstata13", "XML", "tidyr")
lapply(packs, library, character.only = TRUE)
stalData <- xmlToDataFrame(doc="https://www.veiligstallen.nl/veiligstallen.xml")
install.packages("xml2")
library(xml2)
x <- read_xml("https://www.veiligstallen.nl/veiligstallen.xml")
x <- as_list(x)
content(x)
x
x <- read_xml("https://www.veiligstallen.nl/veiligstallen.xml")
stalData <- xmlToDataFrame(doc="https://www.veiligstallen.nl/veiligstallen.xml")
xmlfile <- xmlTreeParse("https://www.veiligstallen.nl/veiligstallen.xml")
eventData <- read.csv("http://open.datapunt.amsterdam.nl/Evenementen.csv")
write.csv(stalData, "sessie 3/event_data.csv")
write.csv(eventData, "sessie 3/event_data.csv")
eventDF <- read.csv(file = "https://github.com/witusj/R-workshop/raw/gh-pages/Datasets/sessie%203/event_data.csv",
stringsAsFactors = TRUE)
View(eventData)
View(eventData)
View(eventDF)
View(eventData)
eventData <- read.csv("http://open.datapunt.amsterdam.nl/Evenementen.csv")
eventData <- read.csv("http://open.datapunt.amsterdam.nl/Evenementen.csv", sep = ";")
write.csv(eventData, "sessie 3/event_data.csv")
eventData <- read.csv("http://open.datapunt.amsterdam.nl/Evenementen.csv", sep = ";")
eventDF <- read.csv(file = "https://github.com/witusj/R-workshop/raw/gh-pages/Datasets/sessie%203/event_data.csv",
stringsAsFactors = TRUE)
View(eventDF)
m2 <- leaflet() %>%
addTiles() %>%
#setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$longitude, lat=eventDF$latitude, 20)
m2
m2 <- leaflet() %>%
addTiles() %>%
#setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20)
m2
eventDF <- read.csv(file = "https://github.com/witusj/R-workshop/raw/gh-pages/Datasets/sessie%203/event_data.csv",
stringsAsFactors = TRUE)
latCtr <- mean(at=eventDF$Latitude)
lonCtr <- mean(eventDF$Longitude)
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20)
m2
latCtr <- mean(eventDF$Latitude)
lonCtr <- mean(eventDF$Longitude)
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20)
m2
eventDF$Latitude
mean(eventDF$Latitude)
eventDF <- read.csv(file = "https://github.com/witusj/R-workshop/raw/gh-pages/Datasets/sessie%203/event_data.csv",
stringsAsFactors = FALSE)
eventDF$Latitude <- as.numeric(eventDF$Latitude)
eventDF$Longitude <- as.numeric(eventDF$Longitude)
eventDF <- read.csv(file = "https://github.com/witusj/R-workshop/raw/gh-pages/Datasets/sessie%203/event_data.csv",
stringsAsFactors = FALSE)
eventDF$Latitude <- as.numeric(gsub(",", ".", eventDF$Latitude))
eventDF$Longitude <- as.numeric(gsub(",", ".", eventDF$Longitude))
latCtr <- mean(eventDF$Latitude)
lonCtr <- mean(eventDF$Longitude)
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20)
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20, popup = ~Title)
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20, popup = ~as.character(Title))
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20, popup = eventDT$Title))
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20, popup = eventDT$Title)
m2
m2 <- leaflet() %>%
addTiles() %>%
setView(lonCtr, latCtr, 12) %>% # map location
addCircles(color = "Red", lng=eventDF$Longitude, lat=eventDF$Latitude, 20, popup = eventDF$Title)
m2
View(eventDF)
install.packages("LSAfun")
setwd("~/GitHub/witusj.github.io/MinorSI")
install.packages("DiagrammeR")
devtools::install_github(wch/webshot)
devtools::install_github("wch/webshot")
###
# Create a graph with both nodes and edges
# defined, and, add some default attributes
# for nodes and edges
###
library(DiagrammeR)
library(gsheet)
edgeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=0&single=true&output=csv'
)
nodeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=887688557&single=true&output=csv'
)
edgeData2$From_node <- gsub(" ", "\n", edgeData2$From_node)
edgeData2$To_node <- gsub(" ", "\n", edgeData2$To_node)
nodeData2$Name <- gsub(" ", "\n", nodeData2$Name)
nodeData2$Text <- paste0(nodeData2$Text)
# Create a node data frame
nodes2 <-
create_nodes(
nodes = nodeData2$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData2$Color,
shape = nodeData2$Shape,
height = 0.5,
width = 0.85,
fixedsize = "true",
fontsize = 10,
data = nodeData2$Value,
tooltip = nodeData2$Text
)
edges2 <-
create_edges(
from = edgeData2$From_node,
to = edgeData2$To_node,
color = edgeData2$Color,
rel = edgeData2$Value
)
graph2 <-
create_graph(
nodes_df = nodes2,
edges_df = edges2,
graph_attrs = c("layout = neato", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = "arrowsize = 0.8"
)
# Examine the NDF within the
# graph object
graph2$nodes_df
graph2$edges_df
###
# Create a graph with both nodes and edges
# defined, and, add some default attributes
# for nodes and edges
###
library(DiagrammeR)
library(gsheet)
edgeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=0&single=true&output=csv'
)
nodeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=887688557&single=true&output=csv'
)
edgeData2$From_node <- gsub(" ", "\n", edgeData2$From_node)
edgeData2$To_node <- gsub(" ", "\n", edgeData2$To_node)
nodeData2$Name <- gsub(" ", "\n", nodeData2$Name)
nodeData2$Text <- paste0(nodeData2$Text)
# Create a node data frame
nodes2 <-
create_nodes(
nodes = nodeData2$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData2$Color,
shape = nodeData2$Shape,
height = 0.5,
width = 0.85,
fixedsize = "true",
fontsize = 10,
data = nodeData2$Value,
tooltip = nodeData2$Text
)
edges2 <-
create_edges(
from = edgeData2$From_node,
to = edgeData2$To_node,
color = edgeData2$Color,
rel = edgeData2$Value
)
graph2 <-
create_graph(
nodes_df = nodes2,
edges_df = edges2,
graph_attrs = c("layout = neato", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = "arrowsize = 0.8"
)
# Examine the NDF within the
# graph object
graph2$nodes_df
graph2$edges_df
###
# Create a graph with both nodes and edges
# defined, and, add some default attributes
# for nodes and edges
###
library(DiagrammeR)
library(gsheet)
edgeData <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1lJBBGHXKQFQHe0MVR-3cJxhPfRXuYZeYBsWowbHw5cM/pub?gid=0&single=true&output=csv'
)
nodeData <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1lJBBGHXKQFQHe0MVR-3cJxhPfRXuYZeYBsWowbHw5cM/pub?gid=887688557&single=true&output=csv'
)
edgeData$From_node <- gsub(" ", "\n", edgeData$From_node)
edgeData$To_node <- gsub(" ", "\n", edgeData$To_node)
nodeData$Name <- gsub(" ", "\n", nodeData$Name)
nodeData$Text <- paste0(nodeData$Text)
# Create a node data frame
nodes <-
create_nodes(
nodes = nodeData$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData$Color,
shape = nodeData$Shape,
width = 1,
fixedsize = "true",
fontsize = 10,
tooltip = nodeData$Text
)
edges <-
create_edges(
from = edgeData$From_node,
to = edgeData$To_node,
color = edgeData$Color,
minlen = edgeData$Len,
penwidth = 2,
fontsize = 8,
label = edgeData$Label,
tooltip = edgeData$Tooltip
)
graph <-
create_graph(
nodes_df = nodes,
edges_df = edges,
graph_attrs = c("layout = dot", "rankdir = TB", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = c("arrowsize = 0.6", "fontname = Helvetica")
)
# Examine the NDF within the
# graph object
graph$nodes_df
graph$edges_df
render_graph(graph)
