### 1
Locatie$Plaats <- as.character(Locatie$Plaats)
View(Locatie)
Locatie <- lappy(Locatie, as.character)
Locatie <- lapply(Locatie, as.character)
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
## Vragenset Basis
### 1
Locatie$Plaats <- as.character(Locatie$Plaats)
Locatie <- apply(Locatie, as.character)
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
Locatie <- sapply(Locatie, as.character)
View(Locatie)
View(Locatie)
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
## Vragenset Basis
### 1
Locatie <- sapply(y = c(1,2), as.character(Locatie[,y]))
Locatie <- sapply(y = c(1,2), as.character(Locatie[,y]))
y = c(1,2)
Locatie[,y]
as.character(Locatie[,y]
)
Locatie[,c(1,2)]
Locatie[,c(1,2)] <- sapply(y = c(1,2), as.character(Locatie[,y]))
Locatie[,c(1,2)] <- sapply(Locatie[,c(1,2)], as.character)
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
## Vragenset Basis
### 1
Locatie[,c(1,2)] <- sapply(Locatie[,c(1,2)], as.character)
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
## Vragenset Basis
### 1
Locatie$Plaats <- as.character(Locatie$Plaats)
Locatie$Land <- as.character(Locatie$Land)
#### of
Locatie[,c(1,2)] <- sapply(Locatie[,c(1,2)], as.character)
### 2
Locatie[3,] <- c("Berlin", "Deutschland")
## Vectoren en classes
Plaats <- c("Warszawa", "London", "Paris")
class(Plaats)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht)
class(Geslacht)
## Vectorindices
Plaats[2]
## Vectorelementen toevoegen.
Plaats[4] <- "Amsterdam"
Plaats
Plaats <- Plaats[-3]
Plaats
## Data frame structuur
Land <- c("Polska", "UK", "Nederland")
Locatie <- data.frame(Plaats, Land)
class(Locatie)
Locatie[3,1]
Locatie[3,]
Locatie[,2]
## Data frame structuur
Locatie$Land
Locatie$Plaats[1]
## Vragenset Basis
### 1
Locatie$Plaats <- as.character(Locatie$Plaats)
Locatie$Land <- as.character(Locatie$Land)
#### of
Locatie[,c(1,2)] <- sapply(Locatie[,c(1,2)], as.character)
View(Locatie)
Locatie[3,] <- c("Berlin", "Deutschland")
2 + 3
a <- 2
b <- 3
c <- a + b
c
a <- 4
c
c
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht, levels(Transgender, Man, Vrouw))
class(Geslacht)
Geslacht <- c("Man", "Man", "Vrouw")
class(Geslacht)
Geslacht <- as.factor(Geslacht, levels("Transgender", "Man", "Vrouw"))
class(Geslacht)
Geslacht <- factor(Geslacht, levels = c("Transgender", "Man", "Vrouw"))
Geslacht
View(studDF)
# Lees ruwe data in.
htmlpage <- read_html("http://www.kdnuggets.com/2016/06/r-python-top-analytics-data-mining-data-science-software.html")
# Extraheer alle tabellen uit de ruwe data
tables <- html_nodes(htmlpage, "table")
# Selecteer de gewenste tabel.
ranking <- html_table(tables, fill = TRUE)[3][[1]]
# Lees ruwe data in.
htmlpage <- read_html("http://www.kdnuggets.com/2016/06/r-python-top-analytics-data-mining-data-science-software.html")
# Extraheer alle tabellen uit de ruwe data
tables <- html_nodes(htmlpage, "table")
# Selecteer de gewenste tabel.
ranking <- html_table(tables, fill = TRUE)[3][[1]]
library(rvest)
# Lees ruwe data in.
htmlpage <- read_html("http://www.kdnuggets.com/2016/06/r-python-top-analytics-data-mining-data-science-software.html")
# Extraheer alle tabellen uit de ruwe data
tables <- html_nodes(htmlpage, "table")
# Selecteer de gewenste tabel.
ranking <- html_table(tables, fill = TRUE)[3][[1]]
install.packages("rvest")
library(rvest)
# Lees ruwe data in.
htmlpage <- read_html("http://www.kdnuggets.com/2016/06/r-python-top-analytics-data-mining-data-science-software.html")
# Extraheer alle tabellen uit de ruwe data
tables <- html_nodes(htmlpage, "table")
# Selecteer de gewenste tabel.
ranking <- html_table(tables, fill = TRUE)[3][[1]]
ranking$Tool
View(ranking)
ranking <- ranking$Tool
table(ranking)
table(ranking)
packs <- c("gsheet", "dplyr")
lapply(packs, library, character.only = TRUE)
surveyDF <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA/edit?usp=sharing")
View(surveyDF)
# Online spreadsheet
library(gsheet)
surveyDF <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA/edit?usp=sharing")
library(gsheet)
surveyDF <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA")
library(gsheet)
surveyDF <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA")
View(surveyDF)
View(surveyDF)
surveyDF[5]
surveyDF[6]
as.vector(surveyDF[6])
toolVector <- vector(surveyDF[1,6])
toolVector <- stringsplit(surveyDF[1,6], ",")
toolVector <- strsplit(surveyDF[1,6], ",")
toolVector <- strsplit(surveyDF[1,6], "[,]")
surveyDF[1,6]
surveyDF[1][[6]]
surveyDF[[1]][6]
toolVector <- strsplit(surveyDF[1][6], "[,]")
surveyDF[1][6]
surveyDF[1,6]
surveyDF[1,6][1]
surveyDF[1,6][[1]]
strsplit(surveyDF[1,6][[1]], "[,]")
toolVector <- strsplit(surveyDF[1,6][[1]], "[,]")
toolVector <- unlist(strsplit(surveyDF[1,6][[1]], "[,]"))
install.packages("quantmod")
# Online spreadsheet
## Lees online data in
library(gsheet)
surveyDF <- gsheet2tbl("https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA/edit?usp=sharing")
## Bekijk eerste regels van data
head(surveyDF, 20)
## Bekijk de structuur van data
str(surveyDF)
## Bekijk de kwaliteit van data
summary(surveyDF)
getFinancials("AAP", env = .GlobalEnv, src = "google",
auto.assign = TRUE,
...)
library(quantmod)
getFinancials("AAP", env = .GlobalEnv, src = "google",
auto.assign = TRUE,
...)
getFinancials("AAP", env = .GlobalEnv, src = "google",
auto.assign = TRUE
)
finData <- getFinancials("AAP", env = .GlobalEnv, src = "google",
auto.assign = TRUE
)
AAPL$CF$A
AAP$CF$A
JAVA <- getFinancials('JAVA')
AAPL <- getFin('AAPL')
JAVA$IS$Q   # Quarterly Income Statement
AAPL$CF$A   # Annual Cash Flows
library(quantmod)
getFinancials(Symbol="AMD", src="google")
#to get the names of the matrix: rownames(AMD.f$IS$A)
Total.Revenue<-AMD.f$IS$A["Revenue",]
Gross.Profit<-AMD.f$IS$A["Gross Profit",]
finData<-AMD.f$IS$A
View(finData)
getFinancials(Symbol="PHIA", src="google")
getFinancials(Symbol="AMS:PHIA", src="google")
getFinancials(Symbol="PHG", src="google")
finSymb <- getFinancials(Symbol="PHG", src="google")
finData<-finSymb$IS$A
finSymb
finData<-finSymb[1]$IS$A
finSymb[1]
finSymb[[1]]
finData<-finSymb[[1]]$IS$A
finSymb[[1]][1]
finData<-finSymb[[1]][1]$IS$A
getFinancials('GE')
viewFinancials(GE.f)
getFinancials('GE')
GEData <- viewFinancials(GE.f)
View(GEData)
GEData <- viewFinancials(GE.f, "IS", "A")
View(GEData)
library(quantmod)
getFinancials('GE')
GEBalance <- viewFinancials(GE.f, "BS", "A")
GEIncome <- viewFinancials(GE.f, "IS", "A")
View(GEBalance)
library(quantmod)
getFinancials(c('GE', 'PHG'))
finBalance <- viewFinancials(c(GE.f, PHG.f), "BS", "A")
finIncome <- viewFinancials(c(GE.f, PHG.f), "IS", "A")
GE.f
library(quantmod)
tickers <- new.env()
t <- c("PHG", "AAPL")
lapply(t, getFinancials, env = tickers)
BS <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'BS', period = 'A')
}))
IS <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'IS', period = 'A')
}))
CF <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'CF', period = 'A')
}))
BS['Total Receivables, Net', grep('PHG.f.2014',names(BS))]
library(quantmod)
tickers <- new.env()
t <- c("PHG", "AAPL")
lapply(t, getFinancials, env = tickers)
BS <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'BS', period = 'A')
}))
IS <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'IS', period = 'A')
}))
CF <-
data.frame(lapply(tickers, function(x) {
viewFinancials(x, type = 'CF', period = 'A')
}))
BS['Total Receivables, Net', grep('PHG.f.2014',names(BS))]
View(BS)
tickers
str(tickers)
ls(tickers)
grep('PHG.f.2014',names(BS))
names(BS)
library(rvest)
# Lees ruwe data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
tables <- html_nodes(htmlpage, "table")
library(rvest)
# Lees ruwe data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
tables <- html_nodes(htmlpage, "table")
html_table(tables, fill = TRUE)
library(rvest)
# Lees ruwe data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(tables, fill = TRUE)
tables <- html_table(tables)
tables <- html_table(nodes)
tables <- html_table(nodes, fill = TRUE)
tables
content(nodes)
tables[2]
tables[3]
str(tables)
str(tables[2])
str(tables[3])
str(tables[4])
tables[4][[1]]
# Rvest
# Lees ruwe data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
spotDF <- tables[4][[1]]
View(spotDF)
View(spotDF)
spotDF$X1
spotDF$X2
spotDF$X2 <- numeric(spotDF$X2)
spotDF$X2 <- as.numeric(spotDF$X2)
# Lees ruwe html data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
spotDF <- tables[4][[1]]
View(spotDF)
spotDF$X2 <- as.numeric(sub("\\$","", spotDF$X2))
library(rvest)
# Lees ruwe html data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
spotDF <- tables[4][[1]]
spotDF$X2 <- as.numeric(sub("\\$","", spotDF$X2))
# Lees ruwe html data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
spotDF <- tables[4][[1]]
spotDF$X2 <- as.numeric(sub("\\$","", spotDF$X2))
# Lees ruwe html data in.
htmlpage <- read_html("http://www.dailydairyreport.com/")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
# Kies een tabel en stop de data in een data frame
spotDF <- tables[4][[1]]
spotDF$X2 <- as.numeric(sub("\\$","", spotDF$X2))
# Lees ruwe html data in.
htmlpage <- read_html("http://www.pginvestor.com/Historic-Prices")
# Extraheer alle tabellen uit de ruwe data
nodes <- html_nodes(htmlpage, "table")
tables <- html_table(nodes, fill = TRUE)
str(tables)
stockDF <- tables[1]
stockDF <- tables[1][[1]]
View(stockDF)
head(stockDF)
str(stockDF)
summary(stockDF)
## Laad de benodigde package(s)
library(gsheet)
## Lees online data in
url <- "https://docs.google.com/spreadsheets/d/1j-bW2MmrbRYso2IJekNWKsGlWL2SwtJQ_ebSj9hs7kA"
surveyDF <- gsheet2tbl(url)
View(surveyDF)
install.packages("prettydoc")
install.packages("prettydoc", repos = "http://cran.us.r-project.org")
install.packages("devtools")
devtools::install_github(yixuan/prettydoc)
devtools::install_github("yixuan/prettydoc")
install.packages("markdown")
install.packages("markdown", repos = "http://cran.us.r-project.org")
devtools::install_github("yixuan/prettydoc")
detach("package:quantmod", unload=TRUE)
install.packages(c("checkpoint", "nlme", "survival"))
install.packages("prettydoc", repos = "http://cran.us.r-project.org")
install.packages("rmarkdown")
install.packages("rmarkdown", repos = "http://cran.us.r-project.org")
install.packages("prettydoc", repos = "http://cran.us.r-project.org")
devtools::install_github("yixuan/prettydoc")
install.packages(c("gsheet", "rvest", "dplyr", "googleVis", "plotly", "leaflet"))
values <- c("20", "50")
sum(values)
values1 <- c("20", "50")
sum(values1)
values2 <- c(20, 50)
sum(values2)
devtools::install_github("rstudio/bookdown")
View(stockDF)
install.packages("readstata13")
setwd("~/Downloads")
library(readstata13)
dat <- read.dta13("morg07.dta")
View(dat)
setwd("~/Google Drive/R-workshop/R-workshop_m")
# Lokaal csv-bestand
## Lees data uit lokaal csv-bestand
cpsDF <- read.csv("CPSData.csv", fill = TRUE)
## Bekijk eerste regels van data
head(cpsDF)
## Bekijk de structuur van data
str(cpsDF)
## Bekijk de kwaliteit van data
summary(cpsDF)
View(cpsDF)
library(readstata13)
dat <- read.dta13("sessie 2/jul16pub.dat")
setwd("~/Google Drive/R-workshop/R-workshop_m")
library(readstata13)
dat <- read.dta13("sessie 2/jul16pub.dat")
