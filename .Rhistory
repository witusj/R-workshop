nodeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=887688557&single=true&output=csv'
)
edgeData2$From_node <- gsub(" ", "\n", edgeData2$From_node)
edgeData2$To_node <- gsub(" ", "\n", edgeData2$To_node)
nodeData2$Name <- gsub(" ", "\n", nodeData2$Name)
nodeData2$Text <- paste0(nodeData2$Text)
# Create a node data frame
nodes2 <-
create_nodes(
nodes = nodeData2$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData2$Color,
shape = nodeData2$Shape,
height = 0.5,
width = 0.85,
fixedsize = "true",
fontsize = 10,
data = nodeData2$Value,
tooltip = nodeData2$Text
)
edges2 <-
create_edges(
from = edgeData2$From_node,
to = edgeData2$To_node,
color = edgeData2$Color,
rel = edgeData2$Value
)
graph2 <-
create_graph(
nodes_df = nodes2,
edges_df = edges2,
graph_attrs = c("layout = neato", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = "arrowsize = 0.8"
)
# Examine the NDF within the
# graph object
graph2$nodes_df
graph2$edges_df
###
# Create a graph with both nodes and edges
# defined, and, add some default attributes
# for nodes and edges
###
library(DiagrammeR)
library(gsheet)
edgeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=0&single=true&output=csv'
)
nodeData2 <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1oX9qiwqBgiTJNjphtgsX8qEi8TdFukPTUMTOEJPsDeY/pub?gid=887688557&single=true&output=csv'
)
edgeData2$From_node <- gsub(" ", "\n", edgeData2$From_node)
edgeData2$To_node <- gsub(" ", "\n", edgeData2$To_node)
nodeData2$Name <- gsub(" ", "\n", nodeData2$Name)
nodeData2$Text <- paste0(nodeData2$Text)
# Create a node data frame
nodes2 <-
create_nodes(
nodes = nodeData2$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData2$Color,
shape = nodeData2$Shape,
height = 0.5,
width = 0.85,
fixedsize = "true",
fontsize = 10,
data = nodeData2$Value,
tooltip = nodeData2$Text
)
edges2 <-
create_edges(
from = edgeData2$From_node,
to = edgeData2$To_node,
color = edgeData2$Color,
rel = edgeData2$Value
)
graph2 <-
create_graph(
nodes_df = nodes2,
edges_df = edges2,
graph_attrs = c("layout = neato", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = "arrowsize = 0.8"
)
# Examine the NDF within the
# graph object
graph2$nodes_df
graph2$edges_df
###
# Create a graph with both nodes and edges
# defined, and, add some default attributes
# for nodes and edges
###
library(DiagrammeR)
library(gsheet)
edgeData <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1lJBBGHXKQFQHe0MVR-3cJxhPfRXuYZeYBsWowbHw5cM/pub?gid=0&single=true&output=csv'
)
nodeData <-
gsheet2tbl(
'https://docs.google.com/spreadsheets/d/1lJBBGHXKQFQHe0MVR-3cJxhPfRXuYZeYBsWowbHw5cM/pub?gid=887688557&single=true&output=csv'
)
edgeData$From_node <- gsub(" ", "\n", edgeData$From_node)
edgeData$To_node <- gsub(" ", "\n", edgeData$To_node)
nodeData$Name <- gsub(" ", "\n", nodeData$Name)
nodeData$Text <- paste0(nodeData$Text)
# Create a node data frame
nodes <-
create_nodes(
nodes = nodeData$Name,
label = FALSE,
type = "lower",
style = "filled",
color = nodeData$Color,
shape = nodeData$Shape,
width = 1,
fixedsize = "true",
fontsize = 10,
tooltip = nodeData$Text
)
edges <-
create_edges(
from = edgeData$From_node,
to = edgeData$To_node,
color = edgeData$Color,
minlen = edgeData$Len,
penwidth = 2,
fontsize = 8,
label = edgeData$Label,
tooltip = edgeData$Tooltip
)
graph <-
create_graph(
nodes_df = nodes,
edges_df = edges,
graph_attrs = c("layout = dot", "rankdir = TB", "tooltip = 'Beweeg over elementen voor meer informatie'"),
node_attrs = "fontname = Helvetica",
edge_attrs = c("arrowsize = 0.6", "fontname = Helvetica")
)
# Examine the NDF within the
# graph object
graph$nodes_df
graph$edges_df
render_graph(graph)
setwd("~/Google Drive/Data Analysis/LORA/SmartParks")
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
myDF <- fromJSON(jsonData)
View(myDF)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
View(newDF)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
timestap <- as.POSIXct(newDF$ts, origin="1970-01-01")
timestap
timestap <- as.POSIXlt(newDF$ts, origin="1970-01-01")
timestap
timestap <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
timestap
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Time <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
View(newDF)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- newDF$data[i]
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
newDF <- fromJSON(jsonData)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(s, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
newDF$EUI
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21")]
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21")]
which(newDF$EUI=="BE7A000000000F21")
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21"),]
runApp()
runApp()
library(jsonlite)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
runApp()
library(jsonlite)
library(plotly)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
p <- plot_ly(neDF, x = Tijd, y = Temp, mode = "markers", color = "Red")
p
library(jsonlite)
library(plotly)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F21"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
p <- plot_ly(newDF, x = Tijd, y = Temp, mode = "markers", color = "Red")
p
library(jsonlite)
library(plotly)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F23"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXlt(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
p <- plot_ly(newDF, x = Tijd, y = Temp, mode = "markers", color = "Red")
p
newDF$Tijd
library(jsonlite)
library(plotly)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F23"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXct(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
p <- plot_ly(newDF, x = Tijd, y = Temp, mode = "markers", color = "Red")
p
runApp()
runApp()
runApp()
runApp()
runApp()
library(jsonlite)
library(plotly)
jsonData <- readLines("https://eu1.loriot.io/1/data/0ZpcVxn0o__4zxNHCcl4iQ/BE7A0609.json")
rawDF <- fromJSON(jsonData)
newDF <- na.omit(rawDF)
newDF <- newDF[which(newDF$EUI=="BE7A000000000F23"),]
sensorNames <- unique(newDF$EUI)
newDF$Tijd <- as.POSIXct(newDF$ts/1000, origin="1970-01-01")
Message <- NULL
Temp <- NULL
for (i in c(1:length(newDF$data))) {
s <- as.character(newDF$data[i])
print(s)
h <- sapply(seq(1, nchar(s), by=2), function(x) substr(s, x, x+1))
print(h)
Message[i] <- rawToChar(as.raw(strtoi(h, 16L)))           # Converteer naar tekst
print(Message[i])
Temp[i] <- unlist(strsplit(Message[i], "# "))[2]
}
newDF$Message <- Message
newDF$Temp <- as.numeric(Temp)
p <- plot_ly(newDF, x = Tijd, y = Temp, mode = "markers", color = "Red")
p
runApp()
rmarkdown::render_site()
setwd("~/Google Drive/MERIT/Smart Ind/SIHackathon")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
